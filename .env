# AI
EXPO_GOOGLE_GEMINI_API_KEY=AIzaSyA4JN5uI7Tgt4XqLYtn0fk8_QMPUqyHozg
# SayMyName
EXPO_GOOGLE_PLACE_KEY_SAYMYNAME=30a5917emshb6b1185fc063b8dp197c79jsnda78c8ed8127
# Sumit
EXPO_GOOGLE_PLACE_KEY_SUMIT=16dd781a59mshf7547591d9a568fp1c0fe0jsn8488c4c5be00
#yxshgahlot2@gmail.com
EXPO_GOOGLE_PLACE_KEY_2=da4f03ea3emshc1b0972d6a9b5ddp1e0124jsne1c8c09f127e
# stillhere774@gmail.com
EXPO_GOOGLE_MAP_KEY_774=c060f3f169mshb1798eaab01b22cp1e088bjsn2f7f00e4d293


# yashgahlot107@gmail.com
EXPO_GOOGLE_PLACE_KEY_107=b023ed67cfmsh8a80e388a2ec883p18c18cjsn9605c6077f0d

# gahlotyash479@gmail.com
EXPO_GOOGLE_MAP_KEY_479=1f75bbd16bmsh23e846fd974cb4cp190e85jsn29da75d29439

# APIKEY1
c2cf11c4eemsh19dfa53b857e5b0p18601ejsn53a257643fdc

# APIKEY 2
76dcd81e35mshf04c0cd60a4c6f4p118585jsn97fea8cdebcd

# APIKEY 3
cc667e016cmshc1ca2bedbb37b04p156b16jsn18845ed58250

# APIKEY 4
1ead328256mshc30d01a7a8502c5p18c8e0jsn33e234ffd379

# APIKEY 5
c7be0d2d8amshb29e117832ac34ap166f83jsne36cfea8e3c5

# ezboiz07
3526df2599msh30d37fd54520d49p1f6771jsna48ee5997cd6

# eas build -p android --profile preview


# import { StyleSheet, Text, View, Image } from "react-native";
# import React, { useContext, useEffect, useState } from "react";
# import { Colors } from "@/constants/Colors";
# import { CreateTripContext } from "./../../context/CreateTripContext";
# import { AI_PROMPT } from "../../constants/Options";
# import { useRouter } from "expo-router";
# import { db, auth } from "../../configs/FirebaseConfig";
# import { chatSession, parts, apiKey } from "../../configs/AiModal";
# import { doc, setDoc } from "firebase/firestore";

# const Generatetrip = () => {
#   const { tripData, setTripData } = useContext(CreateTripContext);
#   const [loading, setLoading] = useState(false);
#   const [errorMessage, setErrorMessage] = useState(null); // To store error messages for the user
#   const router = useRouter();
#   const user = auth.currentUser;

#   useEffect(() => {
#     console.log(tripData);
#     tripData && GenerateAitrip();
#   }, [tripData]);

#   const GenerateAitrip = async () => {
#     setLoading(true);
#     setErrorMessage(null); // Reset any previous errors

#     // Construct the prompt
#     const FINAL_PROMPT = AI_PROMPT.replace(
#       "{location}",
#       tripData?.locationInfo.name
#     )
#       .replace("{totalDays}", tripData?.totalNoOfDays)
#       .replace("{totalNight}", tripData?.totalNoOfDays - 1)
#       .replace("{traveler}", tripData?.traveler?.title)
#       .replace("{budget}", tripData?.budget)
#       .replace("{totalDays}", tripData?.totalNoOfDays)
#       .replace("{totalNight}", tripData?.totalNoOfDays - 1);

#     console.log("FINAL_PROMPT:", FINAL_PROMPT);

#     try {
#       // Sending the AI prompt
#       const result = await chatSession.sendMessage(FINAL_PROMPT);
#       const responseText = await result.response.text(); // Ensure response is text

#       // Check if the response is empty
#       if (!responseText || responseText.trim() === "") {
#         throw new Error("Received empty response from AI.");
#       }

#       console.log("AI Response Text:", responseText);

#       // Determine if response is JSON by checking the first character
#       let tripResp;
#       if (
#         responseText.trim().startsWith("{") ||
#         responseText.trim().startsWith("[")
#       ) {
#         try {
#           tripResp = JSON.parse(responseText);
#           console.log("Parsed Trip Response:", tripResp);
#         } catch (jsonError) {
#           throw new Error("Invalid JSON format: " + jsonError.message);
#         }
#       } else {
#         // Handle the response as plain text
#         console.warn("AI response is not JSON, handling as plain text.");
#         tripResp = { text: responseText };
#       }

#       // Now writing to Firestore
#       const docId = Date.now().toString();
#       await setDoc(doc(db, "UserTrip", docId), {
#         userEmail: user.email,
#         tripPlan: tripResp,
#         tripData: JSON.stringify(tripData),
#         docId: docId,
#       });
#       console.log("Document successfully written to Firestore!");
#       router.push("(tabs)/mytrip");
#     } catch (error) {
#       console.error("Error:", error.message);
#       setErrorMessage(error.message); // Set error message to be displayed
#     } finally {
#       setLoading(false);
#     }
#   };

#   return (
#     <View
#       style={{
#         padding: 25,
#         paddingTop: 75,
#         backgroundColor: Colors.WHITE,
#         height: "100%",
#         alignContent: "center",
#         alignItems: "center",
#       }}
#     >
#       <Text
#         style={{ fontFamily: "outfit-bold", fontSize: 35, textAlign: "center" }}
#       >
#         Please Wait...
#       </Text>
#       <Text
#         style={{
#           fontFamily: "outfit-medium",
#           fontSize: 20,
#           textAlign: "center",
#           marginTop: 40,
#         }}
#       >
#         Your trip is being generated by AI
#       </Text>
#       <Image
#         source={require("./../../assets/images/bot.gif")}
#         style={{
#           width: "100%",
#           height: 240,
#           objectFit: "contain",
#           marginTop: 30,
#           paddingTop: 10,
#         }}
#       />
#       <Text
#         style={{
#           fontFamily: "outfit",
#           fontSize: 20,
#           textAlign: "center",
#           marginTop: 40,
#           color: Colors.GRAY,
#         }}
#       >
#         Do not Go Back
#       </Text>
#       {errorMessage && (
#         <Text style={{ color: "red", marginTop: 20 }}>
#           Error: {errorMessage}
#         </Text>
#       )}
#     </View>
#   );
};